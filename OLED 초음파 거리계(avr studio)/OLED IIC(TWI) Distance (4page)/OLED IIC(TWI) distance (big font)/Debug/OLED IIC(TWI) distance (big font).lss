
OLED IIC(TWI) distance (big font).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee0  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e0  00000000  00000000  00002e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	42 c3       	rjmp	.+1668   	; 0x686 <__ctors_end>
   2:	96 c4       	rjmp	.+2348   	; 0x930 <__vector_1>
   4:	50 c3       	rjmp	.+1696   	; 0x6a6 <__bad_interrupt>
   6:	4f c3       	rjmp	.+1694   	; 0x6a6 <__bad_interrupt>
   8:	4e c3       	rjmp	.+1692   	; 0x6a6 <__bad_interrupt>
   a:	4d c3       	rjmp	.+1690   	; 0x6a6 <__bad_interrupt>
   c:	4c c3       	rjmp	.+1688   	; 0x6a6 <__bad_interrupt>
   e:	4b c3       	rjmp	.+1686   	; 0x6a6 <__bad_interrupt>
  10:	4a c3       	rjmp	.+1684   	; 0x6a6 <__bad_interrupt>
  12:	75 c4       	rjmp	.+2282   	; 0x8fe <__vector_9>
  14:	48 c3       	rjmp	.+1680   	; 0x6a6 <__bad_interrupt>
  16:	47 c3       	rjmp	.+1678   	; 0x6a6 <__bad_interrupt>
  18:	46 c3       	rjmp	.+1676   	; 0x6a6 <__bad_interrupt>
  1a:	45 c3       	rjmp	.+1674   	; 0x6a6 <__bad_interrupt>
  1c:	44 c3       	rjmp	.+1672   	; 0x6a6 <__bad_interrupt>
  1e:	43 c3       	rjmp	.+1670   	; 0x6a6 <__bad_interrupt>
  20:	42 c3       	rjmp	.+1668   	; 0x6a6 <__bad_interrupt>
  22:	41 c3       	rjmp	.+1666   	; 0x6a6 <__bad_interrupt>
  24:	40 c3       	rjmp	.+1664   	; 0x6a6 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	00 00       	nop
  28:	00 00       	nop
  2a:	00 00       	nop
  2c:	00 80       	ld	r0, Z
  2e:	e0 f0       	brcs	.+56     	; 0x68 <__SREG__+0x29>
  30:	70 38       	cpi	r23, 0x80	; 128
  32:	18 18       	sub	r1, r8
  34:	18 18       	sub	r1, r8
  36:	38 70       	andi	r19, 0x08	; 8
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 00       	.word	0x0080	; ????
	...
  44:	00 00       	nop
  46:	00 f0       	brcs	.+0      	; 0x48 <__SREG__+0x9>
  48:	ff ff       	.word	0xffff	; ????
  4a:	0f 01       	movw	r0, r30
	...
  54:	01 0f       	add	r16, r17
  56:	ff ff       	.word	0xffff	; ????
  58:	f0 00       	.word	0x00f0	; ????
	...
  62:	00 1f       	adc	r16, r16
  64:	ff ff       	.word	0xffff	; ????
  66:	e0 00       	.word	0x00e0	; ????
	...
  70:	00 e0       	ldi	r16, 0x00	; 0
  72:	ff ff       	.word	0xffff	; ????
  74:	1f 00       	.word	0x001f	; ????
	...
  7e:	00 00       	nop
  80:	01 03       	mulsu	r16, r17
  82:	0f 1f       	adc	r16, r31
  84:	1c 38       	cpi	r17, 0x8C	; 140
  86:	20 30       	cpi	r18, 0x00	; 0
  88:	30 20       	and	r3, r0
  8a:	38 1c       	adc	r3, r8
  8c:	1f 0f       	add	r17, r31
  8e:	03 01       	movw	r0, r6
	...
  9c:	00 00       	nop
  9e:	00 80       	ld	r0, Z
  a0:	80 80       	ld	r8, Z
  a2:	c0 c0       	rjmp	.+384    	; 0x224 <__SREG__+0x1e5>
  a4:	f8 f8       	.word	0xf8f8	; ????
  a6:	f8 00       	.word	0x00f8	; ????
	...
  b8:	00 00       	nop
  ba:	00 01       	movw	r0, r0
  bc:	01 01       	movw	r0, r2
  be:	01 01       	movw	r0, r2
  c0:	ff ff       	.word	0xffff	; ????
  c2:	ff 00       	.word	0x00ff	; ????
	...
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff 00       	.word	0x00ff	; ????
	...
  f8:	3f 3f       	cpi	r19, 0xFF	; 255
  fa:	3f 00       	.word	0x003f	; ????
	...
 10c:	80 c0       	rjmp	.+256    	; 0x20e <__SREG__+0x1cf>
 10e:	e0 f0       	brcs	.+56     	; 0x148 <__SREG__+0x109>
 110:	70 38       	cpi	r23, 0x80	; 128
 112:	18 18       	sub	r1, r8
 114:	18 18       	sub	r1, r8
 116:	18 38       	cpi	r17, 0x88	; 136
 118:	70 f0       	brcs	.+28     	; 0x136 <__SREG__+0xf7>
 11a:	e0 c0       	rjmp	.+448    	; 0x2dc <__SREG__+0x29d>
 11c:	80 00       	.word	0x0080	; ????
	...
 126:	00 00       	nop
 128:	0f 0f       	add	r16, r31
 12a:	0f 00       	.word	0x000f	; ????
 12c:	00 00       	nop
 12e:	00 00       	nop
 130:	00 00       	nop
 132:	00 80       	ld	r0, Z
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	ff 7f       	andi	r31, 0xFF	; 255
 138:	1f 00       	.word	0x001f	; ????
	...
 142:	00 00       	nop
 144:	00 c0       	rjmp	.+0      	; 0x146 <__SREG__+0x107>
 146:	e0 f0       	brcs	.+56     	; 0x180 <__SREG__+0x141>
 148:	70 38       	cpi	r23, 0x80	; 128
 14a:	1c 0c       	add	r1, r12
 14c:	06 06       	cpc	r0, r22
 14e:	03 03       	mulsu	r16, r19
 150:	01 00       	.word	0x0001	; ????
	...
 15e:	00 3c       	cpi	r16, 0xC0	; 192
 160:	3f 3f       	cpi	r19, 0xFF	; 255
 162:	23 30       	cpi	r18, 0x03	; 3
 164:	30 30       	cpi	r19, 0x00	; 0
 166:	30 30       	cpi	r19, 0x00	; 0
 168:	30 30       	cpi	r19, 0x00	; 0
 16a:	30 30       	cpi	r19, 0x00	; 0
 16c:	30 30       	cpi	r19, 0x00	; 0
 16e:	30 30       	cpi	r19, 0x00	; 0
 170:	30 00       	.word	0x0030	; ????
	...
 17a:	00 00       	nop
 17c:	80 c0       	rjmp	.+256    	; 0x27e <__SREG__+0x23f>
 17e:	e0 f0       	brcs	.+56     	; 0x1b8 <__SREG__+0x179>
 180:	18 38       	cpi	r17, 0x88	; 136
 182:	08 08       	sbc	r0, r8
 184:	08 08       	sbc	r0, r8
 186:	38 18       	sub	r3, r8
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	c0 80       	ld	r12, Z
	...
 198:	07 07       	cpc	r16, r23
 19a:	07 00       	.word	0x0007	; ????
 19c:	00 00       	nop
 19e:	80 80       	ld	r8, Z
 1a0:	80 80       	ld	r8, Z
 1a2:	c0 c0       	rjmp	.+384    	; 0x324 <__SREG__+0x2e5>
 1a4:	f0 7f       	andi	r31, 0xF0	; 240
 1a6:	3f 1f       	adc	r19, r31
	...
 1b0:	00 00       	nop
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
 1b6:	00 00       	nop
 1b8:	00 00       	nop
 1ba:	01 01       	movw	r0, r2
 1bc:	01 01       	movw	r0, r2
 1be:	01 03       	mulsu	r16, r17
 1c0:	07 0f       	add	r16, r23
 1c2:	fe fc       	.word	0xfcfe	; ????
 1c4:	f8 00       	.word	0x00f8	; ????
	...
 1ce:	00 01       	movw	r0, r0
 1d0:	07 0f       	add	r16, r23
 1d2:	1e 1c       	adc	r1, r14
 1d4:	30 38       	cpi	r19, 0x80	; 128
 1d6:	20 20       	and	r2, r0
 1d8:	20 20       	and	r2, r0
 1da:	38 30       	cpi	r19, 0x08	; 8
 1dc:	1c 1e       	adc	r1, r28
 1de:	0f 07       	cpc	r16, r31
 1e0:	01 00       	.word	0x0001	; ????
	...
 1f2:	00 00       	nop
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	f0 f8       	bld	r15, 0
 1f8:	f8 f8       	.word	0xf8f8	; ????
	...
 20a:	00 80       	ld	r0, Z
 20c:	e0 f0       	brcs	.+56     	; 0x246 <__SREG__+0x207>
 20e:	7c 3e       	cpi	r23, 0xEC	; 236
 210:	0f 07       	cpc	r16, r31
 212:	03 ff       	sbrs	r16, 3
 214:	ff ff       	.word	0xffff	; ????
	...
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	f0 fc       	sbrc	r15, 0
 226:	9f cf       	rjmp	.-194    	; 0x166 <__SREG__+0x127>
 228:	c3 c1       	rjmp	.+902    	; 0x5b0 <panel+0x12a>
 22a:	c0 c0       	rjmp	.+384    	; 0x3ac <__SREG__+0x36d>
 22c:	c0 c0       	rjmp	.+384    	; 0x3ae <__SREG__+0x36f>
 22e:	80 ff       	sbrs	r24, 0
 230:	ff ff       	.word	0xffff	; ????
 232:	80 c0       	rjmp	.+256    	; 0x334 <__SREG__+0x2f5>
 234:	c0 c0       	rjmp	.+384    	; 0x3b6 <__SREG__+0x377>
	...
 24a:	00 3f       	cpi	r16, 0xF0	; 240
 24c:	3f 3f       	cpi	r19, 0xFF	; 255
	...
 25a:	00 00       	nop
 25c:	00 c0       	rjmp	.+0      	; 0x25e <__SREG__+0x21f>
 25e:	f8 f8       	.word	0xf8f8	; ????
 260:	18 18       	sub	r1, r8
 262:	18 18       	sub	r1, r8
 264:	18 18       	sub	r1, r8
 266:	18 18       	sub	r1, r8
 268:	18 18       	sub	r1, r8
 26a:	18 18       	sub	r1, r8
	...
 278:	f0 ff       	sbrs	r31, 0
 27a:	ff e7       	ldi	r31, 0x7F	; 127
 27c:	70 70       	andi	r23, 0x00	; 0
 27e:	30 30       	cpi	r19, 0x00	; 0
 280:	30 30       	cpi	r19, 0x00	; 0
 282:	70 70       	andi	r23, 0x00	; 0
 284:	e0 c0       	rjmp	.+448    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 286:	c0 00       	.word	0x00c0	; ????
	...
 294:	01 01       	movw	r0, r2
 296:	01 00       	.word	0x0001	; ????
	...
 2a0:	00 03       	mulsu	r16, r16
 2a2:	ff ff       	.word	0xffff	; ????
 2a4:	fc 00       	.word	0x00fc	; ????
	...
 2ae:	00 07       	cpc	r16, r16
 2b0:	0f 1f       	adc	r16, r31
 2b2:	1c 30       	cpi	r17, 0x0C	; 12
 2b4:	38 20       	and	r3, r8
 2b6:	20 20       	and	r2, r0
 2b8:	20 20       	and	r2, r0
 2ba:	38 18       	sub	r3, r8
 2bc:	1c 1f       	adc	r17, r28
 2be:	0f 03       	fmul	r16, r23
	...
 2cc:	00 80       	ld	r0, Z
 2ce:	e0 f0       	brcs	.+56     	; 0x308 <__SREG__+0x2c9>
 2d0:	70 38       	cpi	r23, 0x80	; 128
 2d2:	38 18       	sub	r3, r8
 2d4:	18 18       	sub	r1, r8
 2d6:	38 38       	cpi	r19, 0x88	; 136
 2d8:	f0 f0       	brcs	.+60     	; 0x316 <__SREG__+0x2d7>
 2da:	e0 80       	ld	r14, Z
	...
 2e4:	00 00       	nop
 2e6:	00 f0       	brcs	.+0      	; 0x2e8 <__SREG__+0x2a9>
 2e8:	fe ff       	.word	0xfffe	; ????
 2ea:	8f c1       	rjmp	.+798    	; 0x60a <panel+0x184>
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	60 60       	ori	r22, 0x00	; 0
 2f0:	60 60       	ori	r22, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	c0 c3       	rjmp	.+1920   	; 0xa76 <main+0x56>
 2f6:	83 03       	fmuls	r16, r19
	...
 300:	00 00       	nop
 302:	00 ff       	sbrs	r16, 0
 304:	ff ff       	.word	0xffff	; ????
 306:	07 01       	movw	r0, r14
	...
 310:	01 03       	mulsu	r16, r17
 312:	ff ff       	.word	0xffff	; ????
 314:	fc 00       	.word	0x00fc	; ????
	...
 31e:	00 00       	nop
 320:	03 0f       	add	r16, r19
 322:	1f 1c       	adc	r1, r15
 324:	30 38       	cpi	r19, 0x80	; 128
 326:	20 20       	and	r2, r0
 328:	20 20       	and	r2, r0
 32a:	30 30       	cpi	r19, 0x00	; 0
 32c:	18 1e       	adc	r1, r24
 32e:	0f 07       	cpc	r16, r31
 330:	01 00       	.word	0x0001	; ????
	...
 33a:	00 00       	nop
 33c:	18 18       	sub	r1, r8
 33e:	18 18       	sub	r1, r8
 340:	18 18       	sub	r1, r8
 342:	18 18       	sub	r1, r8
 344:	18 18       	sub	r1, r8
 346:	18 98       	cbi	0x03, 0	; 3
 348:	c8 f8       	.word	0xf8c8	; ????
 34a:	f8 78       	andi	r31, 0x88	; 136
 34c:	18 00       	.word	0x0018	; ????
	...
 35e:	00 c0       	rjmp	.+0      	; 0x360 <__SREG__+0x321>
 360:	f0 fc       	sbrc	r15, 0
 362:	7f 1f       	adc	r23, r31
 364:	07 01       	movw	r0, r14
	...
 376:	00 00       	nop
 378:	c0 f8       	bld	r12, 0
 37a:	ff 7f       	andi	r31, 0xFF	; 255
 37c:	07 01       	movw	r0, r14
	...
 392:	00 3e       	cpi	r16, 0xE0	; 224
 394:	3f 3f       	cpi	r19, 0xFF	; 255
 396:	07 00       	.word	0x0007	; ????
	...
 3ac:	80 c0       	rjmp	.+256    	; 0x4ae <panel+0x28>
 3ae:	e0 f0       	brcs	.+56     	; 0x3e8 <__SREG__+0x3a9>
 3b0:	70 38       	cpi	r23, 0x80	; 128
 3b2:	18 18       	sub	r1, r8
 3b4:	18 18       	sub	r1, r8
 3b6:	18 38       	cpi	r17, 0x88	; 136
 3b8:	70 f0       	brcs	.+28     	; 0x3d6 <__SREG__+0x397>
 3ba:	e0 c0       	rjmp	.+448    	; 0x57c <panel+0xf6>
 3bc:	80 00       	.word	0x0080	; ????
	...
 3c6:	00 00       	nop
 3c8:	1f 3f       	cpi	r17, 0xFF	; 255
 3ca:	7f f0       	brie	.+30     	; 0x3ea <__SREG__+0x3ab>
 3cc:	e0 c0       	rjmp	.+448    	; 0x58e <panel+0x108>
 3ce:	80 80       	ld	r8, Z
 3d0:	80 80       	ld	r8, Z
 3d2:	80 c0       	rjmp	.+256    	; 0x4d4 <panel+0x4e>
 3d4:	e0 f0       	brcs	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d6:	7f 3f       	cpi	r23, 0xFF	; 255
 3d8:	0f 00       	.word	0x000f	; ????
	...
 3e2:	00 f0       	brcs	.+0      	; 0x3e4 <__SREG__+0x3a5>
 3e4:	fc fe       	.word	0xfefc	; ????
 3e6:	0f 07       	cpc	r16, r31
 3e8:	03 03       	mulsu	r16, r19
 3ea:	01 01       	movw	r0, r2
 3ec:	01 01       	movw	r0, r2
 3ee:	03 03       	mulsu	r16, r19
 3f0:	07 0f       	add	r16, r23
 3f2:	ff fe       	.word	0xfeff	; ????
 3f4:	fc 00       	.word	0x00fc	; ????
	...
 3fe:	00 01       	movw	r0, r0
 400:	07 0f       	add	r16, r23
 402:	1e 1c       	adc	r1, r14
 404:	30 38       	cpi	r19, 0x80	; 128
 406:	20 20       	and	r2, r0
 408:	20 20       	and	r2, r0
 40a:	38 30       	cpi	r19, 0x08	; 8
 40c:	18 1c       	adc	r1, r8
 40e:	0f 07       	cpc	r16, r31
 410:	01 00       	.word	0x0001	; ????
	...
 41a:	00 00       	nop
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	f0 70       	andi	r31, 0x00	; 0
 420:	38 38       	cpi	r19, 0x88	; 136
 422:	18 18       	sub	r1, r8
 424:	18 18       	sub	r1, r8
 426:	38 38       	cpi	r19, 0x88	; 136
 428:	70 f0       	brcs	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42a:	e0 80       	ld	r14, Z
	...
 434:	00 00       	nop
 436:	00 7f       	andi	r16, 0xF0	; 240
 438:	ff ff       	.word	0xffff	; ????
 43a:	81 00       	.word	0x0081	; ????
	...
 444:	00 c1       	rjmp	.+512    	; 0x646 <panel+0x1c0>
 446:	dd ff       	.word	0xffdd	; ????
 448:	fe 00       	.word	0x00fe	; ????
	...
 452:	00 00       	nop
 454:	01 03       	mulsu	r16, r17
 456:	07 07       	cpc	r16, r23
 458:	0e 0c       	add	r0, r14
 45a:	0c 0c       	add	r0, r12
 45c:	0c 0c       	add	r0, r12
 45e:	0e 06       	cpc	r0, r30
 460:	07 e3       	ldi	r16, 0x37	; 55
 462:	fb ff       	.word	0xfffb	; ????
 464:	1f 00       	.word	0x001f	; ????
	...
 46e:	00 00       	nop
 470:	07 0f       	add	r16, r23
 472:	1f 1c       	adc	r1, r15
 474:	38 20       	and	r3, r8
 476:	20 20       	and	r2, r0
 478:	20 20       	and	r2, r0
 47a:	38 1c       	adc	r3, r8
 47c:	1e 0f       	add	r17, r30
 47e:	07 01       	movw	r0, r14
 480:	00 00       	nop
 482:	00 00       	nop
	...

00000486 <panel>:
	...
 48e:	00 00 04 04 04 fc fc 04 04 04 04 0c 18 f0 f0 c0     ................
 49e:	00 04 04 04 fc fc 04 00 00 20 78 cc 84 84 84 84     ......... x.....
 4ae:	0c 1c 1c 20 00 18 0c 0c 04 04 fc fc fc 04 04 04     ... ............
 4be:	1c 1c 30 00 00 00 00 00 e0 3c 3c 3c f8 c0 00 00     ..0......<<<....
 4ce:	00 00 00 04 04 fc 1c 70 e0 e0 80 00 04 fc fc fc     .......p........
 4de:	04 00 e0 e0 f8 0c 04 04 04 04 0c 1c 38 38 00 04     ............88..
 4ee:	04 fc fc 84 84 84 e4 e4 0c 1c 30 00 00 00 00 00     ..........0.....
	...
 50e:	00 00 20 20 20 3f 3f 20 20 20 20 30 18 0f 0f 03     ..   ??    0....
 51e:	00 20 20 20 3f 2f 20 00 00 18 30 20 21 21 61 61     .   ?/ ...0 !!aa
 52e:	23 3f 3f 0c 00 00 00 00 00 20 2f 3f 3f 20 20 00     #??...... /??  .
 53e:	00 00 00 00 20 38 38 2f 23 02 02 02 23 2f 3e 3e     .... 88/#...#/>>
 54e:	30 20 00 20 20 3f 20 20 00 00 03 07 0c 3f 3f 3f     0 .  ?  .....???
 55e:	00 00 0f 0f 1f 38 20 60 60 60 20 30 1c 1c 04 20     .....8 ``` 0... 
 56e:	20 3f 3f 21 21 21 27 27 20 38 18 00 00 00 00 00      ??!!!'' 8......
	...
 58a:	00 00 04 04 04 fc 3c e0 e0 80 00 00 00 00 e0 3c     ......<........<
 59a:	fc fc fc 04 00 04 fc fc fc 84 84 84 84 cc 1c 38     ...............8
 5aa:	00 00 00 00 00 80 80 f0 1c 7c f0 f0 80 00 00 00     .........|......
 5ba:	00 00 70 f8 cc cc 84 84 0c 1c 1c 38 00 04 04 04     ..p........8....
 5ca:	fc fc 04 04 00 00 04 04 04 fc 04 04 04 04 04 fc     ................
 5da:	6c 04 04 04 8c f8 f8 f8 00 00 04 fc fc fc 84 84     l...............
 5ea:	84 84 cc 0c 38 00 00 00 04 fc fc fc 04 04 04 8c     ....8...........
 5fa:	8c f8 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
 60a:	00 00 60 60 60 3f 60 01 01 0f 7c 3c 07 07 61 60     ..```?`...|<..a`
 61a:	3f 3f 3f 60 00 60 3f 3f 3f 61 61 61 61 27 30 38     ???`.`???aaaa'08
 62a:	08 08 60 60 3c 67 67 22 02 02 63 63 6f 3c 60 60     ..``<gg"..cco<``
 63a:	60 00 38 30 20 20 61 61 61 37 37 1e 00 00 00 00     `.80  aaa77.....
 64a:	1f 3f 20 20 60 60 60 30 30 1f 00 00 60 60 60 3f     .?  ```00...```?
 65a:	6d 61 61 03 0f 38 30 30 60 00 60 3f 3f 3f 61 61     maa..800`.`???aa
 66a:	61 61 27 30 38 08 08 00 60 3f 3f 3f 61 03 0f 1c     aa'08...`???a...
 67a:	1c 30 60 60 00 00 00 00 00 00 00 00                 .0``........

00000686 <__ctors_end>:
 686:	11 24       	eor	r1, r1
 688:	1f be       	out	0x3f, r1	; 63
 68a:	cf e5       	ldi	r28, 0x5F	; 95
 68c:	d4 e0       	ldi	r29, 0x04	; 4
 68e:	de bf       	out	0x3e, r29	; 62
 690:	cd bf       	out	0x3d, r28	; 61

00000692 <__do_clear_bss>:
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	a0 e6       	ldi	r26, 0x60	; 96
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	01 c0       	rjmp	.+2      	; 0x69c <.do_clear_bss_start>

0000069a <.do_clear_bss_loop>:
 69a:	1d 92       	st	X+, r1

0000069c <.do_clear_bss_start>:
 69c:	a0 37       	cpi	r26, 0x70	; 112
 69e:	b2 07       	cpc	r27, r18
 6a0:	e1 f7       	brne	.-8      	; 0x69a <.do_clear_bss_loop>
 6a2:	be d1       	rcall	.+892    	; 0xa20 <main>
 6a4:	32 c2       	rjmp	.+1124   	; 0xb0a <_exit>

000006a6 <__bad_interrupt>:
 6a6:	ac cc       	rjmp	.-1704   	; 0x0 <__vectors>

000006a8 <write>:
		for(j=0; j < 10; j++)
		{
			data_write(pgm_read_byte(&font[ch][k++]));
		}
	}
}
 6a8:	94 ea       	ldi	r25, 0xA4	; 164
 6aa:	96 bf       	out	0x36, r25	; 54
 6ac:	06 b6       	in	r0, 0x36	; 54
 6ae:	07 fe       	sbrs	r0, 7
 6b0:	fd cf       	rjmp	.-6      	; 0x6ac <write+0x4>
 6b2:	98 e7       	ldi	r25, 0x78	; 120
 6b4:	93 b9       	out	0x03, r25	; 3
 6b6:	94 e8       	ldi	r25, 0x84	; 132
 6b8:	96 bf       	out	0x36, r25	; 54
 6ba:	06 b6       	in	r0, 0x36	; 54
 6bc:	07 fe       	sbrs	r0, 7
 6be:	fd cf       	rjmp	.-6      	; 0x6ba <write+0x12>
 6c0:	13 b8       	out	0x03, r1	; 3
 6c2:	94 e8       	ldi	r25, 0x84	; 132
 6c4:	96 bf       	out	0x36, r25	; 54
 6c6:	06 b6       	in	r0, 0x36	; 54
 6c8:	07 fe       	sbrs	r0, 7
 6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <write+0x1e>
 6cc:	83 b9       	out	0x03, r24	; 3
 6ce:	84 e8       	ldi	r24, 0x84	; 132
 6d0:	86 bf       	out	0x36, r24	; 54
 6d2:	06 b6       	in	r0, 0x36	; 54
 6d4:	07 fe       	sbrs	r0, 7
 6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <write+0x2a>
 6d8:	84 e9       	ldi	r24, 0x94	; 148
 6da:	86 bf       	out	0x36, r24	; 54
 6dc:	08 95       	ret

000006de <data_write>:
 6de:	94 ea       	ldi	r25, 0xA4	; 164
 6e0:	96 bf       	out	0x36, r25	; 54
 6e2:	06 b6       	in	r0, 0x36	; 54
 6e4:	07 fe       	sbrs	r0, 7
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <data_write+0x4>
 6e8:	98 e7       	ldi	r25, 0x78	; 120
 6ea:	93 b9       	out	0x03, r25	; 3
 6ec:	94 e8       	ldi	r25, 0x84	; 132
 6ee:	96 bf       	out	0x36, r25	; 54
 6f0:	06 b6       	in	r0, 0x36	; 54
 6f2:	07 fe       	sbrs	r0, 7
 6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <data_write+0x12>
 6f6:	90 e4       	ldi	r25, 0x40	; 64
 6f8:	93 b9       	out	0x03, r25	; 3
 6fa:	94 e8       	ldi	r25, 0x84	; 132
 6fc:	96 bf       	out	0x36, r25	; 54
 6fe:	06 b6       	in	r0, 0x36	; 54
 700:	07 fe       	sbrs	r0, 7
 702:	fd cf       	rjmp	.-6      	; 0x6fe <data_write+0x20>
 704:	83 b9       	out	0x03, r24	; 3
 706:	84 e8       	ldi	r24, 0x84	; 132
 708:	86 bf       	out	0x36, r24	; 54
 70a:	06 b6       	in	r0, 0x36	; 54
 70c:	07 fe       	sbrs	r0, 7
 70e:	fd cf       	rjmp	.-6      	; 0x70a <data_write+0x2c>
 710:	84 e9       	ldi	r24, 0x94	; 148
 712:	86 bf       	out	0x36, r24	; 54
 714:	08 95       	ret

00000716 <draw>:
 716:	bf 92       	push	r11
 718:	cf 92       	push	r12
 71a:	df 92       	push	r13
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	6c 01       	movw	r12, r24
 72a:	c0 e0       	ldi	r28, 0x00	; 0
 72c:	d0 e0       	ldi	r29, 0x00	; 0
 72e:	0f 2e       	mov	r0, r31
 730:	f0 eb       	ldi	r31, 0xB0	; 176
 732:	bf 2e       	mov	r11, r31
 734:	f0 2d       	mov	r31, r0
 736:	8b 2d       	mov	r24, r11
 738:	b7 df       	rcall	.-146    	; 0x6a8 <write>
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	b5 df       	rcall	.-150    	; 0x6a8 <write>
 73e:	80 e1       	ldi	r24, 0x10	; 16
 740:	b3 df       	rcall	.-154    	; 0x6a8 <write>
 742:	7e 01       	movw	r14, r28
 744:	80 e8       	ldi	r24, 0x80	; 128
 746:	e8 0e       	add	r14, r24
 748:	f1 1c       	adc	r15, r1
 74a:	8e 01       	movw	r16, r28
 74c:	0f 5f       	subi	r16, 0xFF	; 255
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	f6 01       	movw	r30, r12
 752:	ec 0f       	add	r30, r28
 754:	fd 1f       	adc	r31, r29
 756:	84 91       	lpm	r24, Z
 758:	c2 df       	rcall	.-124    	; 0x6de <data_write>
 75a:	e8 01       	movw	r28, r16
 75c:	e0 16       	cp	r14, r16
 75e:	f1 06       	cpc	r15, r17
 760:	a1 f7       	brne	.-24     	; 0x74a <draw+0x34>
 762:	b3 94       	inc	r11
 764:	e7 01       	movw	r28, r14
 766:	e1 14       	cp	r14, r1
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	f8 06       	cpc	r15, r24
 76c:	21 f7       	brne	.-56     	; 0x736 <draw+0x20>
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	bf 90       	pop	r11
 780:	08 95       	ret

00000782 <draw_large_font>:

//28x32 폰트 출력 함수
void draw_large_font(int x, int ch)
{
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
	unsigned int i, j, k =0;
	unsigned int high, low;

	high = x / 16;
 790:	9c 01       	movw	r18, r24
 792:	99 23       	and	r25, r25
 794:	14 f4       	brge	.+4      	; 0x79a <draw_large_font+0x18>
 796:	21 5f       	subi	r18, 0xF1	; 241
 798:	3f 4f       	sbci	r19, 0xFF	; 255
 79a:	35 95       	asr	r19
 79c:	27 95       	ror	r18
 79e:	35 95       	asr	r19
 7a0:	27 95       	ror	r18
 7a2:	35 95       	asr	r19
 7a4:	27 95       	ror	r18
 7a6:	35 95       	asr	r19
 7a8:	27 95       	ror	r18
	low = x % 16;
 7aa:	8f 70       	andi	r24, 0x0F	; 15
 7ac:	90 78       	andi	r25, 0x80	; 128
 7ae:	99 23       	and	r25, r25
 7b0:	24 f4       	brge	.+8      	; 0x7ba <draw_large_font+0x38>
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	80 6f       	ori	r24, 0xF0	; 240
 7b6:	9f 6f       	ori	r25, 0xFF	; 255
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	e8 2e       	mov	r14, r24
 7bc:	80 e7       	ldi	r24, 0x70	; 112
 7be:	86 9f       	mul	r24, r22
 7c0:	e0 01       	movw	r28, r0
 7c2:	87 9f       	mul	r24, r23
 7c4:	d0 0d       	add	r29, r0
 7c6:	11 24       	eor	r1, r1
 7c8:	ca 5d       	subi	r28, 0xDA	; 218
 7ca:	df 4f       	sbci	r29, 0xFF	; 255
 7cc:	0f 2e       	mov	r0, r31
 7ce:	f0 eb       	ldi	r31, 0xB0	; 176
 7d0:	ff 2e       	mov	r15, r31
 7d2:	f0 2d       	mov	r31, r0

	for(i=0; i<4; i++)
	{
		write(0xb0+i);
		write(0x00+low);
		write(0x10+high);
 7d4:	68 94       	set
 7d6:	dd 24       	eor	r13, r13
 7d8:	d4 f8       	bld	r13, 4
 7da:	d2 0e       	add	r13, r18
	high = x / 16;
	low = x % 16;

	for(i=0; i<4; i++)
	{
		write(0xb0+i);
 7dc:	8f 2d       	mov	r24, r15
 7de:	64 df       	rcall	.-312    	; 0x6a8 <write>
		write(0x00+low);
 7e0:	8e 2d       	mov	r24, r14
 7e2:	62 df       	rcall	.-316    	; 0x6a8 <write>
		write(0x10+high);
 7e4:	8d 2d       	mov	r24, r13
 7e6:	60 df       	rcall	.-320    	; 0x6a8 <write>
 7e8:	8e 01       	movw	r16, r28
 7ea:	04 5e       	subi	r16, 0xE4	; 228
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255

		for(j=0; j < 28; j++)
		{
			data_write(pgm_read_byte(&large_font[ch][k++]));
 7ee:	fe 01       	movw	r30, r28
 7f0:	84 91       	lpm	r24, Z
 7f2:	75 df       	rcall	.-278    	; 0x6de <data_write>
 7f4:	21 96       	adiw	r28, 0x01	; 1
	{
		write(0xb0+i);
		write(0x00+low);
		write(0x10+high);

		for(j=0; j < 28; j++)
 7f6:	c0 17       	cp	r28, r16
 7f8:	d1 07       	cpc	r29, r17
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <draw_large_font+0x6c>
 7fc:	f3 94       	inc	r15
 7fe:	e8 01       	movw	r28, r16
	unsigned int high, low;

	high = x / 16;
	low = x % 16;

	for(i=0; i<4; i++)
 800:	f4 eb       	ldi	r31, 0xB4	; 180
 802:	ff 12       	cpse	r15, r31
 804:	eb cf       	rjmp	.-42     	; 0x7dc <draw_large_font+0x5a>
		for(j=0; j < 28; j++)
		{
			data_write(pgm_read_byte(&large_font[ch][k++]));
		}
	}
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	08 95       	ret

00000816 <clear>:
}
*/

//OLED 화면 클리어 함수
void clear(void)
{
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	10 eb       	ldi	r17, 0xB0	; 176
	unsigned int i, j;

	for(i=0; i<4; i++)
	{
		write(0xb0+i);
 81e:	81 2f       	mov	r24, r17
 820:	43 df       	rcall	.-378    	; 0x6a8 <write>
		write(0x00);
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	41 df       	rcall	.-382    	; 0x6a8 <write>
		write(0x10);
 826:	80 e1       	ldi	r24, 0x10	; 16
 828:	3f df       	rcall	.-386    	; 0x6a8 <write>
 82a:	c0 e8       	ldi	r28, 0x80	; 128
 82c:	d0 e0       	ldi	r29, 0x00	; 0
		for(j=0; j < 128; j++)
		{
			data_write(0x00);	//0X00으로 전부 채운다.
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	56 df       	rcall	.-340    	; 0x6de <data_write>
 832:	21 97       	sbiw	r28, 0x01	; 1
	for(i=0; i<4; i++)
	{
		write(0xb0+i);
		write(0x00);
		write(0x10);
		for(j=0; j < 128; j++)
 834:	e1 f7       	brne	.-8      	; 0x82e <clear+0x18>
 836:	1f 5f       	subi	r17, 0xFF	; 255
//OLED 화면 클리어 함수
void clear(void)
{
	unsigned int i, j;

	for(i=0; i<4; i++)
 838:	14 3b       	cpi	r17, 0xB4	; 180
 83a:	89 f7       	brne	.-30     	; 0x81e <clear+0x8>
		for(j=0; j < 128; j++)
		{
			data_write(0x00);	//0X00으로 전부 채운다.
		}
	}
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	08 95       	ret

00000844 <oled_init>:


//OLED 화면 초기화 함수
void oled_init(void)
{
	write(0xAE); //display off
 844:	8e ea       	ldi	r24, 0xAE	; 174
 846:	30 df       	rcall	.-416    	; 0x6a8 <write>
	write(0x20); //Set Memory Addressing Mode
 848:	80 e2       	ldi	r24, 0x20	; 32
 84a:	2e df       	rcall	.-420    	; 0x6a8 <write>
	write(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 84c:	80 e1       	ldi	r24, 0x10	; 16
 84e:	2c df       	rcall	.-424    	; 0x6a8 <write>
	write(0xb0); //Set Page Start Address for Page Addressing Mode,0-7
 850:	80 eb       	ldi	r24, 0xB0	; 176
 852:	2a df       	rcall	.-428    	; 0x6a8 <write>
	write(0xc8); //Set COM Output Scan Direction
 854:	88 ec       	ldi	r24, 0xC8	; 200
 856:	28 df       	rcall	.-432    	; 0x6a8 <write>
	write(0x00); //---set low column address
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	26 df       	rcall	.-436    	; 0x6a8 <write>
	write(0x10); //---set high column address
 85c:	80 e1       	ldi	r24, 0x10	; 16
 85e:	24 df       	rcall	.-440    	; 0x6a8 <write>
	write(0x40); //--set start line address
 860:	80 e4       	ldi	r24, 0x40	; 64
 862:	22 df       	rcall	.-444    	; 0x6a8 <write>

	write(0x81); //--set contrast control register*
 864:	81 e8       	ldi	r24, 0x81	; 129
 866:	20 df       	rcall	.-448    	; 0x6a8 <write>
	write(0xFF);
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	1e df       	rcall	.-452    	; 0x6a8 <write>

	write(0xa1); //--set segment re-map 0 to 127
 86c:	81 ea       	ldi	r24, 0xA1	; 161
 86e:	1c df       	rcall	.-456    	; 0x6a8 <write>
	write(0xa6); //--set normal display
 870:	86 ea       	ldi	r24, 0xA6	; 166
 872:	1a df       	rcall	.-460    	; 0x6a8 <write>
	write(0xa8); //--set multiplex ratio(1 to 64)
 874:	88 ea       	ldi	r24, 0xA8	; 168
 876:	18 df       	rcall	.-464    	; 0x6a8 <write>
	write(0x1F); //
 878:	8f e1       	ldi	r24, 0x1F	; 31
 87a:	16 df       	rcall	.-468    	; 0x6a8 <write>
	write(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 87c:	84 ea       	ldi	r24, 0xA4	; 164
 87e:	14 df       	rcall	.-472    	; 0x6a8 <write>
	write(0xd3); //-set display offset
 880:	83 ed       	ldi	r24, 0xD3	; 211
 882:	12 df       	rcall	.-476    	; 0x6a8 <write>
	write(0x00); //-not offset
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	10 df       	rcall	.-480    	; 0x6a8 <write>
	write(0xd5); //--set display clock divide ratio/oscillator frequency
 888:	85 ed       	ldi	r24, 0xD5	; 213
 88a:	0e df       	rcall	.-484    	; 0x6a8 <write>
	write(0xf0); //--set divide ratio
 88c:	80 ef       	ldi	r24, 0xF0	; 240
 88e:	0c df       	rcall	.-488    	; 0x6a8 <write>
	write(0xd9); //--set pre-charge period
 890:	89 ed       	ldi	r24, 0xD9	; 217
 892:	0a df       	rcall	.-492    	; 0x6a8 <write>

	write(0x22); //
 894:	82 e2       	ldi	r24, 0x22	; 34
 896:	08 df       	rcall	.-496    	; 0x6a8 <write>
	write(0xda); //--set com pins hardware configuration
 898:	8a ed       	ldi	r24, 0xDA	; 218
 89a:	06 df       	rcall	.-500    	; 0x6a8 <write>
	write(0x02);
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	04 df       	rcall	.-504    	; 0x6a8 <write>
	write(0xdb); //--set vcomh
 8a0:	8b ed       	ldi	r24, 0xDB	; 219
 8a2:	02 df       	rcall	.-508    	; 0x6a8 <write>

	write(0x20); //0x20,0.77xVcc
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	00 df       	rcall	.-512    	; 0x6a8 <write>
	write(0x8d); //--set DC-DC enable
 8a8:	8d e8       	ldi	r24, 0x8D	; 141
 8aa:	fe de       	rcall	.-516    	; 0x6a8 <write>
	write(0x14); //
 8ac:	84 e1       	ldi	r24, 0x14	; 20
 8ae:	fc de       	rcall	.-520    	; 0x6a8 <write>
	write(0xaf); //--turn on oled panel
 8b0:	8f ea       	ldi	r24, 0xAF	; 175
 8b2:	fa de       	rcall	.-524    	; 0x6a8 <write>
 8b4:	08 95       	ret

000008b6 <out_num>:
}


//각자리수값 구하는 함수
void out_num(int k)
{
 8b6:	9c 01       	movw	r18, r24
	one = k % 10;
 8b8:	ea e0       	ldi	r30, 0x0A	; 10
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	bf 01       	movw	r22, r30
 8be:	12 d1       	rcall	.+548    	; 0xae4 <__divmodhi4>
 8c0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <one+0x1>
 8c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <one>
	two = (k / 10) % 10;
 8c8:	cb 01       	movw	r24, r22
 8ca:	bf 01       	movw	r22, r30
 8cc:	0b d1       	rcall	.+534    	; 0xae4 <__divmodhi4>
 8ce:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <two+0x1>
 8d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <two>
	three = (k / 100) % 10;
 8d6:	c9 01       	movw	r24, r18
 8d8:	64 e6       	ldi	r22, 0x64	; 100
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	03 d1       	rcall	.+518    	; 0xae4 <__divmodhi4>
 8de:	cb 01       	movw	r24, r22
 8e0:	bf 01       	movw	r22, r30
 8e2:	00 d1       	rcall	.+512    	; 0xae4 <__divmodhi4>
 8e4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <three+0x1>
 8e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <three>
	four = k / 1000;
 8ec:	c9 01       	movw	r24, r18
 8ee:	68 ee       	ldi	r22, 0xE8	; 232
 8f0:	73 e0       	ldi	r23, 0x03	; 3
 8f2:	f8 d0       	rcall	.+496    	; 0xae4 <__divmodhi4>
 8f4:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <four+0x1>
 8f8:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <four>
 8fc:	08 95       	ret

000008fe <__vector_9>:
}

//8비트 타이머 오버플로우 인터럽트
ISR(TIMER0_OVF_vect)
{
 8fe:	1f 92       	push	r1
 900:	0f 92       	push	r0
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	0f 92       	push	r0
 906:	11 24       	eor	r1, r1
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
	TCNT0=140;	//5.8us의 주기로 반복 -> 5.8us의 출력이 나올때기 1cm 이기때문에
 90c:	8c e8       	ldi	r24, 0x8C	; 140
 90e:	82 bf       	out	0x32, r24	; 50
	count++;
 910:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 914:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count+0x1>
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <count+0x1>
 91e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
}
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_1>:

//INT0 인터럽트
ISR(INT0_vect)
{
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	ef 93       	push	r30
 950:	ff 93       	push	r31
	if(m == 0)
 952:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <m>
 956:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <m+0x1>
 95a:	89 2b       	or	r24, r25
 95c:	91 f4       	brne	.+36     	; 0x982 <__vector_1+0x52>
	{
		count = 0;
 95e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count+0x1>
 962:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count>
		TIMSK=0x01; // 오버플로우 인터럽트 설정 0
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	89 bf       	out	0x39, r24	; 57
		TCCR0=0x02;	//프리스케일 설정
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	83 bf       	out	0x33, r24	; 51
		TCNT0=140;	//시작 레지스터 설정
 96e:	9c e8       	ldi	r25, 0x8C	; 140
 970:	92 bf       	out	0x32, r25	; 50
		MCUCR=0x02;	//하강에지로 설정
 972:	85 bf       	out	0x35, r24	; 53
		m = 1;
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <m+0x1>
 97c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <m>
 980:	3e c0       	rjmp	.+124    	; 0x9fe <__vector_1+0xce>
	}

	else
	{
		TIMSK=0x00; //오버플로우 인터럽트 설정 x
 982:	19 be       	out	0x39, r1	; 57
		m = 0;
 984:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <m+0x1>
 988:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <m>

		//450 미만(4.5M 미만)일때의 값은 무시
		if(count < 450)
 98c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 990:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count+0x1>
 994:	82 3c       	cpi	r24, 0xC2	; 194
 996:	91 40       	sbci	r25, 0x01	; 1
 998:	b8 f4       	brcc	.+46     	; 0x9c8 <__vector_1+0x98>
		{
			sum = sum + count;
 99a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 99e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
 9a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 9a6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count+0x1>
 9aa:	82 0f       	add	r24, r18
 9ac:	93 1f       	adc	r25, r19
 9ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 9b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			cnt++;
 9b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cnt>
 9ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt+0x1>
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <cnt+0x1>
 9c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cnt>
		}

		//10번 측정한 값을 평균내서 출력
		if(cnt == 10)
 9c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cnt>
 9cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt+0x1>
 9d0:	0a 97       	sbiw	r24, 0x0a	; 10
 9d2:	99 f4       	brne	.+38     	; 0x9fa <__vector_1+0xca>
		{
			out_num(sum/cnt);
 9d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 9d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 9dc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <cnt>
 9e0:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <cnt+0x1>
 9e4:	6b d0       	rcall	.+214    	; 0xabc <__udivmodhi4>
 9e6:	cb 01       	movw	r24, r22
 9e8:	66 df       	rcall	.-308    	; 0x8b6 <out_num>
			cnt=0;
 9ea:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x1>
 9ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt>
			sum=0;
 9f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 9f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}
		MCUCR=0x03;	//상승에지로 설정
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	85 bf       	out	0x35, r24	; 53
	}
}
 9fe:	ff 91       	pop	r31
 a00:	ef 91       	pop	r30
 a02:	bf 91       	pop	r27
 a04:	af 91       	pop	r26
 a06:	9f 91       	pop	r25
 a08:	8f 91       	pop	r24
 a0a:	7f 91       	pop	r23
 a0c:	6f 91       	pop	r22
 a0e:	5f 91       	pop	r21
 a10:	4f 91       	pop	r20
 a12:	3f 91       	pop	r19
 a14:	2f 91       	pop	r18
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	1f 90       	pop	r1
 a1e:	18 95       	reti

00000a20 <main>:

int main(void)
{
	DDRC = 0xFF;
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x01;
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	81 bb       	out	0x11, r24	; 17

	TWBR = 12;	//(CPU_Clock/SCL_Clock) - 16)/2 = TWBR*(4^TWPS) -> 통신속도 400kHz설정
 a28:	8c e0       	ldi	r24, 0x0C	; 12
 a2a:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
 a2c:	11 b8       	out	0x01, r1	; 1

	GICR=0x40;	//인터럽트  인에이블
 a2e:	80 e4       	ldi	r24, 0x40	; 64
 a30:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0x03;	//처음은 상승 엣지로 설정
 a32:	83 e0       	ldi	r24, 0x03	; 3
 a34:	85 bf       	out	0x35, r24	; 53
	SREG=0x80;	//인터럽트 허용
 a36:	80 e8       	ldi	r24, 0x80	; 128
 a38:	8f bf       	out	0x3f, r24	; 63

	oled_init();	//OLED 초기화
 a3a:	04 df       	rcall	.-504    	; 0x844 <oled_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a3c:	2f ef       	ldi	r18, 0xFF	; 255
 a3e:	80 e7       	ldi	r24, 0x70	; 112
 a40:	92 e0       	ldi	r25, 0x02	; 2
 a42:	21 50       	subi	r18, 0x01	; 1
 a44:	80 40       	sbci	r24, 0x00	; 0
 a46:	90 40       	sbci	r25, 0x00	; 0
 a48:	e1 f7       	brne	.-8      	; 0xa42 <main+0x22>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0x2c>
 a4c:	00 00       	nop
	_delay_ms(50);

	draw(panel);	//초기화면 DISTANACE MEASURER 출력
 a4e:	86 e8       	ldi	r24, 0x86	; 134
 a50:	94 e0       	ldi	r25, 0x04	; 4
 a52:	61 de       	rcall	.-830    	; 0x716 <draw>
 a54:	2f ef       	ldi	r18, 0xFF	; 255
 a56:	83 ed       	ldi	r24, 0xD3	; 211
 a58:	90 e3       	ldi	r25, 0x30	; 48
 a5a:	21 50       	subi	r18, 0x01	; 1
 a5c:	80 40       	sbci	r24, 0x00	; 0
 a5e:	90 40       	sbci	r25, 0x00	; 0
 a60:	e1 f7       	brne	.-8      	; 0xa5a <main+0x3a>
 a62:	00 c0       	rjmp	.+0      	; 0xa64 <main+0x44>
 a64:	00 00       	nop
	_delay_ms(1000);

	clear();
 a66:	d7 de       	rcall	.-594    	; 0x816 <clear>

	while(1)
	{
		PORTD=0x01;
 a68:	c1 e0       	ldi	r28, 0x01	; 1
 a6a:	c2 bb       	out	0x12, r28	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a6c:	25 e3       	ldi	r18, 0x35	; 53
 a6e:	2a 95       	dec	r18
 a70:	f1 f7       	brne	.-4      	; 0xa6e <main+0x4e>
 a72:	00 00       	nop
		_delay_us(10);	//초음파센서 트리거 발생
		PORTD=0x00;
 a74:	12 ba       	out	0x12, r1	; 18

		draw_large_font(0,four);		//1의 자리 출력
 a76:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <four>
 a7a:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <four+0x1>
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	7f de       	rcall	.-770    	; 0x782 <draw_large_font>
		draw_large_font(28,three);	//10의자리 출력
 a84:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <three>
 a88:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <three+0x1>
 a8c:	8c e1       	ldi	r24, 0x1C	; 28
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	78 de       	rcall	.-784    	; 0x782 <draw_large_font>
		draw_large_font(56,two);		//100의 자리 출력
 a92:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <two>
 a96:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <two+0x1>
 a9a:	88 e3       	ldi	r24, 0x38	; 56
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	71 de       	rcall	.-798    	; 0x782 <draw_large_font>
		draw_large_font(84,one);		//1000의 자리 출력
 aa0:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <one>
 aa4:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <one+0x1>
 aa8:	84 e5       	ldi	r24, 0x54	; 84
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	6a de       	rcall	.-812    	; 0x782 <draw_large_font>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 aae:	8f e3       	ldi	r24, 0x3F	; 63
 ab0:	9c e9       	ldi	r25, 0x9C	; 156
 ab2:	01 97       	sbiw	r24, 0x01	; 1
 ab4:	f1 f7       	brne	.-4      	; 0xab2 <main+0x92>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <main+0x98>
 ab8:	00 00       	nop
 aba:	d7 cf       	rjmp	.-82     	; 0xa6a <main+0x4a>

00000abc <__udivmodhi4>:
 abc:	aa 1b       	sub	r26, r26
 abe:	bb 1b       	sub	r27, r27
 ac0:	51 e1       	ldi	r21, 0x11	; 17
 ac2:	07 c0       	rjmp	.+14     	; 0xad2 <__udivmodhi4_ep>

00000ac4 <__udivmodhi4_loop>:
 ac4:	aa 1f       	adc	r26, r26
 ac6:	bb 1f       	adc	r27, r27
 ac8:	a6 17       	cp	r26, r22
 aca:	b7 07       	cpc	r27, r23
 acc:	10 f0       	brcs	.+4      	; 0xad2 <__udivmodhi4_ep>
 ace:	a6 1b       	sub	r26, r22
 ad0:	b7 0b       	sbc	r27, r23

00000ad2 <__udivmodhi4_ep>:
 ad2:	88 1f       	adc	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	5a 95       	dec	r21
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <__udivmodhi4_loop>
 ada:	80 95       	com	r24
 adc:	90 95       	com	r25
 ade:	bc 01       	movw	r22, r24
 ae0:	cd 01       	movw	r24, r26
 ae2:	08 95       	ret

00000ae4 <__divmodhi4>:
 ae4:	97 fb       	bst	r25, 7
 ae6:	07 2e       	mov	r0, r23
 ae8:	16 f4       	brtc	.+4      	; 0xaee <__divmodhi4+0xa>
 aea:	00 94       	com	r0
 aec:	06 d0       	rcall	.+12     	; 0xafa <__divmodhi4_neg1>
 aee:	77 fd       	sbrc	r23, 7
 af0:	08 d0       	rcall	.+16     	; 0xb02 <__divmodhi4_neg2>
 af2:	e4 df       	rcall	.-56     	; 0xabc <__udivmodhi4>
 af4:	07 fc       	sbrc	r0, 7
 af6:	05 d0       	rcall	.+10     	; 0xb02 <__divmodhi4_neg2>
 af8:	3e f4       	brtc	.+14     	; 0xb08 <__divmodhi4_exit>

00000afa <__divmodhi4_neg1>:
 afa:	90 95       	com	r25
 afc:	81 95       	neg	r24
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	08 95       	ret

00000b02 <__divmodhi4_neg2>:
 b02:	70 95       	com	r23
 b04:	61 95       	neg	r22
 b06:	7f 4f       	sbci	r23, 0xFF	; 255

00000b08 <__divmodhi4_exit>:
 b08:	08 95       	ret

00000b0a <_exit>:
 b0a:	f8 94       	cli

00000b0c <__stop_program>:
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <__stop_program>
